import path from 'path'
import { Plugin, UserConfig } from 'vite'
import * as walk from 'acorn-walk'
import vtc from 'vue-template-compiler'
import {
  DEFAULT_EXTENSIONS,
  parsePathQuery,
  detectFileExist,
} from '../utils'

type AcornNode = acorn.Node & Record<string, any>

export function dynamicImport(options?: Record<string, unknown>): Plugin {
  const extensions = DEFAULT_EXTENSIONS
  const refConifg: { current: UserConfig } = { current: null }

  return {
    name: 'vite-plugin-vue2-compatible:dynamicImport',
    config(config) {
      refConifg.current = config
    },
    transform(code, id) {
      if (/node_modules/.test(id)) return
      if (!extensions.some(ext => id.endsWith(ext))) return
      if (parsePathQuery(id).query) return
      if (!/import[\n\s]*\(/g.test(code)) return

      try {
        let code2 = id.endsWith('.vue') ? vtc.parseComponent(code).script.content : code
        const ast = this.parse(code)
        const importExpressions: AcornNode[] = []

        walk.simple(ast, {
          ImportExpression(node) {
            importExpressions.push(node)
          },
        })

        for (const expression of importExpressions.reverse()) {
          const start = expression.source.start
          const end = expression.source.end
          let importText = code2.slice(start, end)
          const alias = refConifg.current?.resolve?.alias ?? {}
          const commaPerfix = /^['"`].*/.test(importText)

          if (commaPerfix) { importText = importText.slice(1) }

          for (const [alia, aliaPath] of Object.entries(alias)) {
            if (importText.startsWith(`${alia}/`)) {
              const relativePathReg = /^(\w+)\/?/
              const regTmp = relativePathReg.exec(importText.replace(`${alia}/`, ''))
              if (!regTmp) continue

              const relativeImportPath = path
                .relative(path.parse(id).dir, path.join(aliaPath, regTmp[1]))
                .replace(regTmp[1], '') || './'
              const fullImportPath = importText.replace(`${alia}/`, relativeImportPath)

              code2
                = code2.slice(0, commaPerfix ? start + 1 : start) // start
                + fullImportPath
                + code2.slice(end) // end
            }
          }

        }
        return code2
      } catch (error) {
        throw error
      }
    },
  }
}
